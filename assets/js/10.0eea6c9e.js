(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{377:function(e,r,t){"use strict";t.r(r);var a=t(45),n=Object(a.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"sharedpreferences-源码分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sharedpreferences-源码分析"}},[e._v("#")]),e._v(" SharedPreferences 源码分析")]),e._v(" "),t("h2",{attrs:{id:"sharedpreferences"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sharedpreferences"}},[e._v("#")]),e._v(" SharedPreferences")]),e._v(" "),t("p",[e._v("SharedPreferences 是 Android 提供的轻量级的数据存储工具。常用于在 Android 中存储简单的 Key-Value 数据。其底层实现是将数据存储到了 xml 文件里。")]),e._v(" "),t("p",[e._v("新版本中，谷歌已经在推荐用 DataStore 代替 SharedPreferences 了。")]),e._v(" "),t("p",[e._v("这里我们对其源码和实现做一下分析。")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://developer.android.google.cn/reference/kotlin/android/content/SharedPreferences",target:"_blank",rel:"noopener noreferrer"}},[e._v("SharedPreferences 文档"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{href:"https://developer.android.google.cn/training/data-storage/shared-preferences",target:"_blank",rel:"noopener noreferrer"}},[e._v("Save key-value data"),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"接口定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#接口定义"}},[e._v("#")]),e._v(" 接口定义")]),e._v(" "),t("p",[e._v("先来看 SharedPreferences 的接口定义")]),e._v(" "),t("h3",{attrs:{id:"nested-classes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nested-classes"}},[e._v("#")]),e._v(" Nested classes")]),e._v(" "),t("h4",{attrs:{id:"abstract-editor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#abstract-editor"}},[e._v("#")]),e._v(" abstract "),t("strong",[e._v("Editor")])]),e._v(" "),t("p",[e._v("修改 SharedPreference 数据的主要工具。")]),e._v(" "),t("h4",{attrs:{id:"abstract-onsharedpreferencechangelistener"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#abstract-onsharedpreferencechangelistener"}},[e._v("#")]),e._v(" abstract "),t("strong",[e._v("OnSharedPreferenceChangeListener")])]),e._v(" "),t("p",[e._v("SharedPreference 变更时的回调监听。")]),e._v(" "),t("h3",{attrs:{id:"public-methods"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#public-methods"}},[e._v("#")]),e._v(" Public methods")]),e._v(" "),t("h4",{attrs:{id:"abstract-contains-key-string-boolean"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#abstract-contains-key-string-boolean"}},[e._v("#")]),e._v(" abstract contains(key: String!) : Boolean")]),e._v(" "),t("p",[e._v("Checks whether the preferences contains a preference.                                                                                                                                        |\n| abstract SharedPreferences.Editor! | edit()                 | Create a new Editor for these preferences, through which you can make modifications to the data in the preferences and atomically commit those changes back to the SharedPreferences object. |")]),e._v(" "),t("p",[e._v("abstract MutableMap<String!, *>!\t\ngetAll()\nRetrieve all values from the preferences.")]),e._v(" "),t("p",[e._v("abstract Boolean\t\ngetBoolean(key: String!, defValue: Boolean)\nRetrieve a boolean value from the preferences.")]),e._v(" "),t("p",[e._v("abstract Float\t\ngetFloat(key: String!, defValue: Float)\nRetrieve a float value from the preferences.")]),e._v(" "),t("p",[e._v("abstract Int\t\ngetInt(key: String!, defValue: Int)\nRetrieve an int value from the preferences.")]),e._v(" "),t("p",[e._v("abstract Long\t\ngetLong(key: String!, defValue: Long)\nRetrieve a long value from the preferences.")]),e._v(" "),t("p",[e._v("abstract String?\t\ngetString(key: String!, defValue: String?)\nRetrieve a String value from the preferences.")]),e._v(" "),t("p",[e._v("abstract MutableSet<String!>?\t\ngetStringSet(key: String!, defValues: MutableSet<String!>?)\nRetrieve a set of String values from the preferences.")]),e._v(" "),t("p",[e._v("abstract Unit\t\nregisterOnSharedPreferenceChangeListener(listener: SharedPreferences.OnSharedPreferenceChangeListener!)\nRegisters a callback to be invoked when a change happens to a preference.")]),e._v(" "),t("p",[e._v("abstract Unit\t\nunregisterOnSharedPreferenceChangeListener(listener: SharedPreferences.OnSharedPreferenceChangeListener!)\nUnregisters a previous callback.")])])}),[],!1,null,null,null);r.default=n.exports}}]);